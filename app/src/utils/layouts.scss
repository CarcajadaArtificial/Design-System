@import 'error';
// =====================================================================================================
//    _                            _       
//   | |    __ _ _   _  ___  _   _| |_ ___ 
//   | |   / _` | | | |/ _ \| | | | __/ __|
//   | |__| (_| | |_| | (_) | |_| | |_\__ \
//   |_____\__,_|\__, |\___/ \__,_|\__|___/
//               |___/                     
// =====================================================================================================

$sizes: (
  hand: 320px,
  page: 600px,
  book: 900px,
  desk: 1200px,
  wide: 1800px
);

$max-sizes: (
  hand: 599px,
  page: 899px,
  book: 1199px,
  desk: 1799px,
  wide: 3000px
);

// -----------------------------------------------------------------------------------------------------
/// @name measure()
///   Looks for a the limit value of a space's width. Default returns the lower limit, the $max variable
/// controls when to return the upper limit.
// -----------------------------------------------------------------------------------------------------
/// @param $space - Name of the space that needs to be measured.
/// @param {bool} $max [false] - Returns the upper limit of the space's width.
/// @output - Limit of the width of a space in pixels.
/// @example
///   $s_width = measure($space: hand); // 320px
///   $l_width = measure($space: hand, $max: true); // 599px
@function measure($space, $max: false) {
  @if($max) {
    @if(map-has-key($max-sizes, $space)) {
      @return map-get($max-sizes, $space);
    } @else {
      @return throw('Unknown space size selected.', value);
    }
  } @else {
    @if(map-has-key($sizes, $space)) {
      @return map-get($sizes, $space);
    } @else {
      @return throw('Unknown space size selected.', value);
    }
  }
}
// -----------------------------------------------------------------------------------------------------
/// @name display-on()
///   Creates the correct media query according to a space size input. The exact values will be the 
/// limits of said space in pixels. Devices with screens smaller than 320px are not going to be handled
/// by the 'display()' function. Correct input values are: hand, page, book, desk, and wide.
/// @content
// -----------------------------------------------------------------------------------------------------
/// @param $size - Space size that will be used to create a media query. 
/// @param $until - Optional space size used to extend $size space to a larger limit.
/// @output - Media queries.
/// @example
///   div {
///     @include display-on(page, $until: desk) {
///       // Style
///     }
///   }
@mixin display-on($size, $until: null) {
  // Will contain the interior of the media query or will remain null in case of an exception.
  $mq: null;
  // -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
  @if ($size == $until) {
    error: throw('This media query has redundant information. ‘display-on(#{$size})’', value);

  } @else if ($size == hand) and ($until == wide) {
    error: throw('This media query is redundant, it includes all devices.', value);
  }
  // -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
  @if $until {
    // Obtains pixel values
    $s-device: measure($size);
    $l-until: measure($until, true);
    // Value validation
    @if ($s-device > $l-until) {
      error: throw('Did you mean ‘display-on(#{$until}, $until: #{$size})’? This media query contains wrong syntax, the value of the ‘until’ parameter should be larger than the value of the ‘size’ parameter.', value);
    }
    // Buids media query
    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-until})';
  
  } @else {
    // Obtains pixel values
    $s-device: measure($size);
    $l-device: measure($size, true);
    // Buids media query
    $mq: '(min-width: #{$s-device}) and (max-width: #{$l-device})';
  }
  @if mq {
    @media #{$mq} {
        @content;
    }
  } 
}

// -----------------------------------------------------------------------------------------------------
// display()
// -----------------------------------------------------------------------------------------------------
// Sets the correct grid attributes depending on the amount of columns and offset spaces.
// * $columns: Amount of columns, can only be 4, 8 or 12.
// * $offset-multiplier: This number multiplied by 24px will become the grid’s margin and offset.
@mixin grid($columns, $offset-multiplier) {
  display: none;
}