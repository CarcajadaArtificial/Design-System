// =====================================================================================================
//    _____                       _   _                 _ _ _
//   | ____|_ __ _ __ ___  _ __  | | | | __ _ _ __   __| | (_)_ __   __ _
//   |  _| | '__| '__/ _ \| '__| | |_| |/ _` | '_ \ / _` | | | '_ \ / _` |
//   | |___| |  | | | (_) | |    |  _  | (_| | | | | (_| | | | | | | (_| |
//   |_____|_|  |_|  \___/|_|    |_| |_|\__,_|_| |_|\__,_|_|_|_| |_|\__, |
//                                                                  |___/
// =====================================================================================================

// The testing mode controls weather the errors are handled using @error and interrupt the compilation when true (default) or @warning and allow a potentially faulty compilation when false.
$testing-mode: true !default;

// Error types and descriptions of their usage;
$error-types: (
  type: 'Type',
  handling: 'Handling'
);

// -----------------------------------------------------------------------------------------------------
// throw()
// -----------------------------------------------------------------------------------------------------
// Reports and handles @errors and @warnings. Constructs their content using a message and a type.
// * $message: The text message that is displayed in the @error or @warning.
// * $error-type: Has to be one of the types of errors inside the Error Handling Standard.
@function throw($message, $error-type) {
  // Verifies that $error-type is valid and part of the standard.
  $valid-type: map-has-key(
    $map: $erro-types,
    $key: $error-type
  );
  @if $valid-type == false {
    @return throw('Error type does not exist.', handling);
  }

  // Handles and throws @error or @warning.
  $final-message: map-get($error-types, $error-type) + ' Error: ' + $message;
  @if $testing-mode {
    @error ($final-message);
  } @else {
    @warn ($final-message);
  }
}
